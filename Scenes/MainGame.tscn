[gd_scene load_steps=34 format=2]

[ext_resource path="res://Scripts/Managers/GameManager.gd" type="Script" id=1]
[ext_resource path="res://Sprites/desktop_background.png" type="Texture" id=2]
[ext_resource path="res://Sprites/pcframeonly.png" type="Texture" id=3]
[ext_resource path="res://Sprites/buttonpress.png" type="Texture" id=4]
[ext_resource path="res://default_env.tres" type="Environment" id=5]
[ext_resource path="res://UI/ButtonTheme.tres" type="Theme" id=6]
[ext_resource path="res://Scripts/pc_startup.gd" type="Script" id=7]
[ext_resource path="res://Animations/PC_startup.tres" type="Animation" id=8]
[ext_resource path="res://Sprites/Icons/painticon.png" type="Texture" id=9]
[ext_resource path="res://Sprites/Icons/fileholdericon.png" type="Texture" id=10]
[ext_resource path="res://Sprites/Icons/windowicons.png" type="Texture" id=11]
[ext_resource path="res://Sprites/Icons/explorericon.png" type="Texture" id=12]
[ext_resource path="res://Sprites/Icons/notepadicon.png" type="Texture" id=13]
[ext_resource path="res://Scripts/Apps/app_icon.gd" type="Script" id=14]
[ext_resource path="res://Sprites/GUI/scrollbarbutton.png" type="Texture" id=15]
[ext_resource path="res://Sprites/Icons/notefile.png" type="Texture" id=16]
[ext_resource path="res://UI/TextEffects/wavy_rainbow.tres" type="RichTextEffect" id=17]
[ext_resource path="res://UI/TextEffects/earthquake.tres" type="RichTextEffect" id=18]
[ext_resource path="res://Animations/Winscreen.tres" type="Animation" id=19]
[ext_resource path="res://Animations/Bluescreen.tres" type="Animation" id=20]
[ext_resource path="res://AdPictures/Audio Clips/Pc-Fan.mp3" type="AudioStream" id=21]
[ext_resource path="res://Sprites/GUI/downloadprogressbar.png" type="Texture" id=22]

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 15 )
region = Rect2( 0, 5, 5, 5 )

[sub_resource type="AtlasTexture" id=11]
atlas = ExtResource( 22 )
region = Rect2( 0, 0, 5, 5 )

[sub_resource type="StyleBoxTexture" id=12]
texture = SubResource( 11 )
region_rect = Rect2( 0, 0, 5, 5 )
margin_left = 1.0
margin_right = 1.0
margin_top = 1.0
margin_bottom = 1.0
modulate_color = Color( 1, 0.207843, 0.207843, 1 )

[sub_resource type="GDScript" id=8]
script/source = "extends Label


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	var time = Time.get_time_dict_from_system()
	text = \"%02d:%02d\" % [time.hour, time.minute]
"

[sub_resource type="Animation" id=6]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("WinScreen:visible_characters")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("RichTextLabel:visible_characters")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("../CanvasLayer:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ColorRect:color")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0.0392157, 0.0392157, 0.0392157, 1 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("RichTextLabel:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("ColorRect:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("../Particles2D:emitting")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/pixelate")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/8/type = "value"
tracks/8/path = NodePath("ColorRect:self_modulate")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}
tracks/9/type = "value"
tracks/9/path = NodePath("BlueScreen:visible_characters")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/10/type = "value"
tracks/10/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/aberration")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.005 ]
}
tracks/11/type = "value"
tracks/11/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/static_noise_intensity")
tracks/11/interp = 1
tracks/11/loop_wrap = true
tracks/11/imported = false
tracks/11/enabled = true
tracks/11/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.03 ]
}
tracks/12/type = "value"
tracks/12/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/discolor")
tracks/12/interp = 1
tracks/12/loop_wrap = true
tracks/12/imported = false
tracks/12/enabled = true
tracks/12/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/13/type = "value"
tracks/13/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/brightness")
tracks/13/interp = 1
tracks/13/loop_wrap = true
tracks/13/imported = false
tracks/13/enabled = true
tracks/13/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.2 ]
}
tracks/14/type = "value"
tracks/14/path = NodePath("BlueScreen:visible")
tracks/14/interp = 1
tracks/14/loop_wrap = true
tracks/14/imported = false
tracks/14/enabled = true
tracks/14/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/15/type = "bezier"
tracks/15/path = NodePath("../PCFan:volume_db")
tracks/15/interp = 1
tracks/15/loop_wrap = true
tracks/15/imported = false
tracks/15/enabled = true
tracks/15/keys = {
"points": PoolRealArray( -20, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/16/type = "value"
tracks/16/path = NodePath("../PCFan:playing")
tracks/16/interp = 1
tracks/16/loop_wrap = true
tracks/16/imported = false
tracks/16/enabled = true
tracks/16/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/17/type = "value"
tracks/17/path = NodePath("WinScreen:visible")
tracks/17/interp = 1
tracks/17/loop_wrap = true
tracks/17/imported = false
tracks/17/enabled = true
tracks/17/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}

[sub_resource type="Animation" id=10]
resource_name = "Shutdown"
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("RichTextLabel:visible_characters")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../CanvasLayer:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ColorRect:color")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0.0392157, 0.0392157, 0.0392157, 1 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("RichTextLabel:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("ColorRect:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("../Particles2D:emitting")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/pixelate")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("ColorRect:self_modulate")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}
tracks/8/type = "value"
tracks/8/path = NodePath("BlueScreen:visible_characters")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/9/type = "value"
tracks/9/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/aberration")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.005 ]
}
tracks/10/type = "value"
tracks/10/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/static_noise_intensity")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.03 ]
}
tracks/11/type = "value"
tracks/11/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/discolor")
tracks/11/interp = 1
tracks/11/loop_wrap = true
tracks/11/imported = false
tracks/11/enabled = true
tracks/11/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/12/type = "value"
tracks/12/path = NodePath("../CanvasLayer/ColorRect:material:shader_param/brightness")
tracks/12/interp = 1
tracks/12/loop_wrap = true
tracks/12/imported = false
tracks/12/enabled = true
tracks/12/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.2 ]
}
tracks/13/type = "value"
tracks/13/path = NodePath("BlueScreen:visible")
tracks/13/interp = 1
tracks/13/loop_wrap = true
tracks/13/imported = false
tracks/13/enabled = true
tracks/13/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="Shader" id=4]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.01
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.0
shader_param/resolution = Vector2( 320, 224 )
shader_param/pixelate = false
shader_param/roll = false
shader_param/roll_speed = 0.0
shader_param/roll_size = 0.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.05
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 20.0
shader_param/static_noise_intensity = 0.03
shader_param/aberration = 0.005
shader_param/brightness = 1.2
shader_param/discolor = false
shader_param/warp_amount = 0.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.2

[sub_resource type="AtlasTexture" id=1]
atlas = ExtResource( 4 )
region = Rect2( 0, 0, 43, 10 )

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 4 )
region = Rect2( 43, 0, 40, 10 )

[sub_resource type="ParticlesMaterial" id=3]
flag_disable_z = true
gravity = Vector3( 0, 0, 0 )
orbit_velocity = 0.0
orbit_velocity_random = 0.0
scale = 4.0
color = Color( 0, 1, 0.356863, 1 )
hue_variation = 0.1
hue_variation_random = 1.0

[node name="GameManager" type="Control"]
script = ExtResource( 1 )
__meta__ = {
"_edit_horizontal_guides_": [  ]
}

[node name="Timer" type="Timer" parent="."]

[node name="AdTimer" type="Timer" parent="."]

[node name="DelayAd" type="Timer" parent="."]

[node name="StateTimer" type="Timer" parent="."]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource( 5 )

[node name="Background" type="Sprite" parent="."]
position = Vector2( 32, 32 )
texture = ExtResource( 2 )
centered = false

[node name="Pcframeonly" type="Sprite" parent="."]
texture = ExtResource( 3 )
centered = false

[node name="ComputerScreen" type="Control" parent="."]
margin_left = 32.0
margin_top = 32.0
margin_right = 351.0
margin_bottom = 256.0
rect_clip_content = true
mouse_filter = 2

[node name="DesktopApps" type="Control" parent="ComputerScreen"]
margin_right = 40.0
margin_bottom = 40.0
mouse_filter = 2

[node name="TrashButton" type="Button" parent="ComputerScreen/DesktopApps"]
margin_left = 6.0
margin_right = 34.0
margin_bottom = 22.0
disabled = true
action_mode = 0
icon = ExtResource( 11 )
flat = true
script = ExtResource( 14 )

[node name="Label" type="Label" parent="ComputerScreen/DesktopApps/TrashButton"]
self_modulate = Color( 1, 1, 1, 0.509804 )
margin_left = -5.0
margin_top = 21.0
margin_right = 35.0
margin_bottom = 35.0
theme = ExtResource( 6 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
text = "Trash"
align = 1

[node name="Timer" type="Timer" parent="ComputerScreen/DesktopApps/TrashButton"]
wait_time = 0.09

[node name="NoteButton" type="Button" parent="ComputerScreen/DesktopApps"]
margin_left = 288.0
margin_right = 316.0
margin_bottom = 22.0
action_mode = 0
icon = ExtResource( 16 )
flat = true
script = ExtResource( 14 )
app_name = "note"

[node name="Label" type="Label" parent="ComputerScreen/DesktopApps/NoteButton"]
margin_left = -5.0
margin_top = 21.0
margin_right = 35.0
margin_bottom = 35.0
theme = ExtResource( 6 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
text = "README"
align = 1

[node name="Timer" type="Timer" parent="ComputerScreen/DesktopApps/NoteButton"]
wait_time = 0.09

[node name="CreditsButton" type="Button" parent="ComputerScreen/DesktopApps"]
margin_left = 288.0
margin_top = 178.0
margin_right = 316.0
margin_bottom = 200.0
action_mode = 0
icon = ExtResource( 16 )
flat = true
script = ExtResource( 14 )
app_name = "credits"

[node name="Label" type="Label" parent="ComputerScreen/DesktopApps/CreditsButton"]
margin_left = -5.0
margin_top = 21.0
margin_right = 35.0
margin_bottom = 35.0
theme = ExtResource( 6 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
text = "Credits"
align = 1

[node name="Timer" type="Timer" parent="ComputerScreen/DesktopApps/CreditsButton"]
wait_time = 0.09

[node name="E-ThernetButton" type="Button" parent="ComputerScreen/DesktopApps"]
margin_left = 6.0
margin_top = 128.0
margin_right = 34.0
margin_bottom = 150.0
action_mode = 0
icon = ExtResource( 12 )
flat = true
script = ExtResource( 14 )
app_name = "webBrowser"

[node name="Label" type="Label" parent="ComputerScreen/DesktopApps/E-ThernetButton"]
margin_left = -5.0
margin_top = 21.0
margin_right = 35.0
margin_bottom = 35.0
theme = ExtResource( 6 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
text = "E-Thernet"
align = 1

[node name="Timer" type="Timer" parent="ComputerScreen/DesktopApps/E-ThernetButton"]
wait_time = 0.09

[node name="FilesButton" type="Button" parent="ComputerScreen/DesktopApps"]
margin_left = 6.0
margin_top = 32.0
margin_right = 34.0
margin_bottom = 54.0
disabled = true
action_mode = 0
icon = ExtResource( 10 )
flat = true
icon_align = 1
script = ExtResource( 14 )

[node name="Label" type="Label" parent="ComputerScreen/DesktopApps/FilesButton"]
margin_left = -5.0
margin_top = 21.0
margin_right = 35.0
margin_bottom = 35.0
theme = ExtResource( 6 )
custom_colors/font_color = Color( 1, 1, 1, 0.513726 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 0.513726 )
text = "Files"
align = 1

[node name="Timer" type="Timer" parent="ComputerScreen/DesktopApps/FilesButton"]
wait_time = 0.09

[node name="NotesButton" type="Button" parent="ComputerScreen/DesktopApps"]
margin_left = 6.0
margin_top = 64.0
margin_right = 34.0
margin_bottom = 86.0
action_mode = 0
icon = ExtResource( 13 )
flat = true
script = ExtResource( 14 )
app_name = "notes"

[node name="Label" type="Label" parent="ComputerScreen/DesktopApps/NotesButton"]
margin_left = -5.0
margin_top = 21.0
margin_right = 35.0
margin_bottom = 35.0
theme = ExtResource( 6 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
text = "Notes"
align = 1

[node name="Timer" type="Timer" parent="ComputerScreen/DesktopApps/NotesButton"]
wait_time = 0.09

[node name="PaintButton" type="Button" parent="ComputerScreen/DesktopApps"]
margin_left = 6.0
margin_top = 96.0
margin_right = 34.0
margin_bottom = 118.0
action_mode = 0
icon = ExtResource( 9 )
flat = true
script = ExtResource( 14 )
app_name = "paint"

[node name="Label" type="Label" parent="ComputerScreen/DesktopApps/PaintButton"]
margin_left = -5.0
margin_top = 21.0
margin_right = 35.0
margin_bottom = 35.0
theme = ExtResource( 6 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
text = "Paint"
align = 1

[node name="Timer" type="Timer" parent="ComputerScreen/DesktopApps/PaintButton"]
wait_time = 0.09

[node name="Windows" type="Control" parent="ComputerScreen"]
margin_right = 319.0
margin_bottom = 215.0
mouse_filter = 2

[node name="TaskBar" type="NinePatchRect" parent="ComputerScreen"]
margin_top = 215.0
margin_right = 298.0
margin_bottom = 224.0
texture = SubResource( 7 )
patch_margin_left = 1
patch_margin_top = 1
patch_margin_right = 1
patch_margin_bottom = 1

[node name="Score" type="Label" parent="ComputerScreen/TaskBar"]
margin_left = 2.0
margin_top = 1.0
margin_right = 121.0
margin_bottom = 8.0
theme = ExtResource( 6 )
clip_text = true

[node name="Player_Timer" type="Label" parent="ComputerScreen/TaskBar"]
margin_left = 242.0
margin_top = 1.0
margin_right = 296.0
margin_bottom = 7.0
theme = ExtResource( 6 )
align = 2
clip_text = true

[node name="ProgressBar" type="ProgressBar" parent="ComputerScreen/TaskBar"]
margin_left = 159.0
margin_right = 236.0
margin_bottom = 8.0
theme = ExtResource( 6 )
custom_styles/fg = SubResource( 12 )
min_value = -0.33
max_value = 1.0
percent_visible = false

[node name="Label" type="Label" parent="ComputerScreen/TaskBar/ProgressBar"]
margin_left = -19.0
margin_top = 1.0
margin_right = -1.0
margin_bottom = 7.0
text = "Temp:"
clip_text = true

[node name="Time" type="NinePatchRect" parent="ComputerScreen"]
margin_left = 298.0
margin_top = 215.0
margin_right = 319.0
margin_bottom = 224.0
texture = SubResource( 7 )
patch_margin_left = 1
patch_margin_top = 1
patch_margin_right = 1
patch_margin_bottom = 1

[node name="Clock" type="Label" parent="ComputerScreen/Time"]
margin_left = 2.0
margin_top = 1.0
margin_right = 42.0
margin_bottom = 7.0
theme = ExtResource( 6 )
text = "16:18"
script = SubResource( 8 )

[node name="PCStartup" type="Control" parent="."]
margin_left = 32.0
margin_top = 32.0
margin_right = 72.0
margin_bottom = 72.0
mouse_filter = 2
script = ExtResource( 7 )

[node name="ColorRect" type="ColorRect" parent="PCStartup"]
margin_right = 320.0
margin_bottom = 224.0
color = Color( 0.0392157, 0.0392157, 0.0392157, 1 )

[node name="RichTextLabel" type="RichTextLabel" parent="PCStartup"]
visible = false
margin_left = 2.0
margin_right = 318.0
margin_bottom = 224.0
theme = ExtResource( 6 )
custom_colors/default_color = Color( 1, 1, 1, 1 )
visible_characters = 0
percent_visible = 0.0
text = "-------------------------------------------------------------------------------
LoseDows Operating System Copyright 19xx - 20xx

Starting operating system...

1%
3%
11%
17%
26%
49%
82%
94%
95%
96%
98%
99%
99%
99%
100%
Startup Complete
-------------------------------------------------------------------------------"
scroll_active = false

[node name="BlueScreen" type="RichTextLabel" parent="PCStartup"]
visible = false
margin_left = 2.0
margin_right = 318.0
margin_bottom = 224.0
theme = ExtResource( 6 )
custom_colors/default_color = Color( 1, 1, 1, 1 )
visible_characters = 0
percent_visible = 0.0
text = "-------------------------------------------------------------------------------
An issue has been detected and Losedows has been shutdown to prevent any damage.

The issue seems to have been caused by: POP-UP.XEX
Your PC will be restored to your previously saved system restore point.
All the data you received/created will be deleted.

Please restart your computer.
-------------------------------------------------------------------------------"
scroll_active = false

[node name="WinScreen" type="RichTextLabel" parent="PCStartup"]
visible = false
margin_left = 2.0
margin_right = 318.0
margin_bottom = 224.0
theme = ExtResource( 6 )
custom_colors/default_color = Color( 1, 1, 1, 1 )
visible_characters = 0
percent_visible = 0.0
text = "-------------------------------------------------------------------------------
Congratulations!

You've managed to download 15 packages from pirate creek!

Your PC will be restored to your previously saved system restore point.
All the data you received/created will be deleted.

Please restart your computer.
-------------------------------------------------------------------------------"
scroll_active = false

[node name="AnimationPlayer" type="AnimationPlayer" parent="PCStartup"]
anims/Bluescreen = ExtResource( 20 )
anims/PC_startup = ExtResource( 8 )
anims/RESET = SubResource( 6 )
anims/Shutdown = SubResource( 10 )
anims/Winscreen = ExtResource( 19 )

[node name="Timer" type="Timer" parent="PCStartup"]

[node name="FinalScore" type="RichTextLabel" parent="PCStartup"]
margin_left = 24.0
margin_top = 83.0
margin_right = 282.0
margin_bottom = 221.0
mouse_filter = 2
theme = ExtResource( 6 )
custom_colors/default_color = Color( 1, 1, 1, 1 )
bbcode_enabled = true
scroll_active = false
custom_effects = [ ExtResource( 18 ), ExtResource( 17 ) ]

[node name="CanvasLayer" type="CanvasLayer" parent="."]
visible = false

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 5 )
margin_left = 32.0
margin_top = 32.0
margin_right = 351.0
margin_bottom = 256.0
mouse_filter = 2

[node name="TextureButton" type="TextureButton" parent="."]
margin_left = 322.0
margin_top = 274.0
margin_right = 365.0
margin_bottom = 284.0
action_mode = 0
texture_normal = SubResource( 1 )
texture_pressed = SubResource( 2 )

[node name="Particles2D" type="Particles2D" parent="."]
position = Vector2( 313, 279 )
emitting = false
amount = 1
lifetime = 0.4
visibility_rect = Rect2( -3, -3, 6, 6 )
process_material = SubResource( 3 )

[node name="DebugNode" type="Control" parent="."]
visible = false
margin_right = 40.0
margin_bottom = 40.0

[node name="WindowAmount" type="Label" parent="DebugNode"]
margin_right = 40.0
margin_bottom = 7.0
theme = ExtResource( 6 )
text = "windows"

[node name="AdAmount" type="Label" parent="DebugNode"]
margin_top = 7.0
margin_right = 40.0
margin_bottom = 14.0
theme = ExtResource( 6 )
text = "ads"

[node name="PCFan" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 21 )
volume_db = -20.0

[connection signal="app_info" from="ComputerScreen/DesktopApps/TrashButton" to="." method="spawn_window"]
[connection signal="app_info" from="ComputerScreen/DesktopApps/NoteButton" to="." method="spawn_window"]
[connection signal="app_info" from="ComputerScreen/DesktopApps/CreditsButton" to="." method="spawn_window"]
[connection signal="app_info" from="ComputerScreen/DesktopApps/E-ThernetButton" to="." method="spawn_window"]
[connection signal="app_info" from="ComputerScreen/DesktopApps/NotesButton" to="." method="spawn_window"]
[connection signal="app_info" from="ComputerScreen/DesktopApps/PaintButton" to="." method="spawn_window"]
[connection signal="shutdown" from="PCStartup" to="." method="_shutdown"]
[connection signal="pressed" from="TextureButton" to="PCStartup" method="_pc_start"]
